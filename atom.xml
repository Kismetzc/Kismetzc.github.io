<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我的小世界</title>
  
  <subtitle>你好呀</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-06-02T12:48:18.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Kismetzc</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>14最长公共长缀</title>
    <link href="http://example.com/2021/06/02/leetcode/14/"/>
    <id>http://example.com/2021/06/02/leetcode/14/</id>
    <published>2021-06-02T12:48:18.000Z</published>
    <updated>2021-06-02T12:48:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="14-最长公共长缀"><a href="#14-最长公共长缀" class="headerlink" title="14 最长公共长缀"></a>14 最长公共长缀</h2><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</p><h5 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：strs &#x3D; [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">输出：&quot;fl&quot;</span><br></pre></td></tr></table></figure><h5 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：strs &#x3D; [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">输出：&quot;&quot;</span><br><span class="line">解释：输入不存在公共前缀。</span><br></pre></td></tr></table></figure><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h4 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h4><p>暴力解</p><p>横向逐个比较</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span>(<span class="params">self, strs</span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> strs:       <span class="comment">#先判断输入是否为空字符串</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span> </span><br><span class="line">        prefix = strs[<span class="number">0</span>]   <span class="comment">#取第一个字符串</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(strs)):</span><br><span class="line">            prefix = self.lcp(prefix,strs[i])</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> prefix:            <span class="comment">#判断公共前缀是否为空</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> prefix</span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lcp</span>(<span class="params">self,str1,str2</span>):</span></span><br><span class="line">        length, index = <span class="built_in">min</span>(<span class="built_in">len</span>(str1),<span class="built_in">len</span>(str2)), <span class="number">0</span>   <span class="comment">#公共前缀长度看比较短的字符串</span></span><br><span class="line">        <span class="comment"># while(index &lt; length):                       </span></span><br><span class="line">        <span class="comment">#     if str1[index] == str2[index]:   #注意这种写法的错误，当 str1[index] != str2[index] 会死循环</span></span><br><span class="line">        <span class="comment">#         index += 1</span></span><br><span class="line">        <span class="comment"># return str2[:index]</span></span><br><span class="line">        <span class="keyword">while</span> index &lt; length <span class="keyword">and</span> str1[index] == str2[index]:</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> str2[:index]</span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line">m = s.longestCommonPrefix([<span class="string">&quot;flower&quot;</span>,<span class="string">&quot;flow&quot;</span>,<span class="string">&quot;flight&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(m)</span><br></pre></td></tr></table></figure><h4 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h4><p>纵向比较(利用Python的特性)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span>(<span class="params">self, strs: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> strs:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        res = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">zip</span>(*strs):   <span class="comment">#解压</span></span><br><span class="line">            s_set = <span class="built_in">set</span>(s)     <span class="comment">#利用set去重</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(s_set) == <span class="number">1</span>:</span><br><span class="line">                res += s_set.pop()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment">#str = [&quot;flower&quot;, &quot;flow&quot;, &quot;flqwe&quot;]</span></span><br><span class="line"><span class="comment">#zip(*str) = </span></span><br><span class="line"><span class="comment"># (&#x27;f&#x27;, &#x27;f&#x27;, &#x27;f&#x27;)</span></span><br><span class="line"><span class="comment"># (&#x27;l&#x27;, &#x27;l&#x27;, &#x27;l&#x27;)</span></span><br><span class="line"><span class="comment"># (&#x27;o&#x27;, &#x27;o&#x27;, &#x27;q&#x27;)</span></span><br><span class="line"><span class="comment"># (&#x27;w&#x27;, &#x27;w&#x27;, &#x27;w&#x27;)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#官方纵向解法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span>(<span class="params">self, strs: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> strs:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        length, count = <span class="built_in">len</span>(strs[<span class="number">0</span>]), <span class="built_in">len</span>(strs)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):  </span><br><span class="line">            c = strs[<span class="number">0</span>][i]   <span class="comment">#取第一个的第一纵位</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">any</span>(i == <span class="built_in">len</span>(strs[j]) <span class="keyword">or</span> strs[j][i] != c <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, count)):  <span class="comment">#与后面的每个字符串相同纵位比较</span></span><br><span class="line">                <span class="keyword">return</span> strs[<span class="number">0</span>][:i]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> strs[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;14-最长公共长缀&quot;&gt;&lt;a href=&quot;#14-最长公共长缀&quot; class=&quot;headerlink&quot; title=&quot;14 最长公共长缀&quot;&gt;&lt;/a&gt;14 最长公共长缀&lt;/h2&gt;&lt;p&gt;编写一个函数来查找字符串数组中的最长公共前缀。&lt;/p&gt;
&lt;p&gt;如果不存在公共前缀，返</summary>
      
    
    
    
    <category term="leedcode" scheme="http://example.com/categories/leedcode/"/>
    
    <category term="easy" scheme="http://example.com/categories/leedcode/easy/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Blog发布过程</title>
    <link href="http://example.com/2021/06/01/blog/"/>
    <id>http://example.com/2021/06/01/blog/</id>
    <published>2021-06-01T12:12:22.000Z</published>
    <updated>2021-06-01T12:20:54.778Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Blog发布过程"><a href="#Blog发布过程" class="headerlink" title="Blog发布过程"></a>Blog发布过程</h2><h5 id="1-创建草稿markdown-保存到sources-draft-config-yml-里面了"><a href="#1-创建草稿markdown-保存到sources-draft-config-yml-里面了" class="headerlink" title="1 创建草稿markdown,保存到sources/_draft(_config.yml)里面了"></a>1 创建草稿markdown,保存到sources/_draft(_config.yml)里面了</h5><p><code> hexo new &quot;name&quot;</code></p><h5 id="2编辑markdown-如Typora"><a href="#2编辑markdown-如Typora" class="headerlink" title="2编辑markdown(如Typora)"></a>2编辑markdown(如Typora)</h5><h5 id="3-清除缓存文件"><a href="#3-清除缓存文件" class="headerlink" title="3 清除缓存文件"></a>3 清除缓存文件</h5><p><code>hexo clean</code></p><h5 id="4-发布到正式post"><a href="#4-发布到正式post" class="headerlink" title="4 发布到正式post"></a>4 发布到正式post</h5><p><code>hexo publish  name</code></p><h5 id="5-生成静态文件"><a href="#5-生成静态文件" class="headerlink" title="5 生成静态文件"></a>5 生成静态文件</h5><p><code>hexo generate</code></p><h5 id="6-部署到github"><a href="#6-部署到github" class="headerlink" title="6 部署到github"></a>6 部署到github</h5><p><code>hexo deploy</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Blog发布过程&quot;&gt;&lt;a href=&quot;#Blog发布过程&quot; class=&quot;headerlink&quot; title=&quot;Blog发布过程&quot;&gt;&lt;/a&gt;Blog发布过程&lt;/h2&gt;&lt;h5 id=&quot;1-创建草稿markdown-保存到sources-draft-config-ym</summary>
      
    
    
    
    <category term="杂" scheme="http://example.com/categories/%E6%9D%82/"/>
    
    
    <category term="杂" scheme="http://example.com/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>1207 独一无二的出现次数</title>
    <link href="http://example.com/2021/05/27/leetcode/1207/"/>
    <id>http://example.com/2021/05/27/leetcode/1207/</id>
    <published>2021-05-27T13:57:46.000Z</published>
    <updated>2021-06-01T14:03:34.083Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1207-独一无二的出现次数"><a href="#1207-独一无二的出现次数" class="headerlink" title="1207 独一无二的出现次数"></a>1207 独一无二的出现次数</h2><p>给你一个整数数组 <code>arr</code>，请你帮忙统计数组中每个数的出现次数。如果每个数的出现次数都是独一无二的，就返回 <code>ture</code>；否则返回 <code>false</code>。</p><h5 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr &#x3D; [1,2,2,1,1,3]</span><br><span class="line">输出：true</span><br><span class="line">解释：在该数组中，1 出现了 3 次，2 出现了 2 次，3 只出现了 1 次。没有两个数的出现次数相同。</span><br></pre></td></tr></table></figure><h5 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr &#x3D; [1,2]</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><h5 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：arr &#x3D; [-3,0,1,-3,1,1,1,-3,10,0]</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><h5 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h5><ul><li><code>1 &lt;= arr.length &lt;= 1000  </code></li><li><code> -1000 &lt;= arr[i] &lt;= 1000</code></li></ul><h5 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h5><p>用字典来统计数字出现次数，将每个次数遍历放到一个list里，如果有重复就return false</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">uniqueOccurrences</span>(<span class="params">self, arr: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">        dic = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> arr:</span><br><span class="line">            dic[num] = dic.get(num, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        check = []</span><br><span class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> dic.items():</span><br><span class="line">            <span class="keyword">if</span> v <span class="keyword">not</span> <span class="keyword">in</span> check:</span><br><span class="line">                check.append(v)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>思路二</p><p>用 collections.Counter计算可迭代中序列中每个元素出现的次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">uniqueOccurrences</span>(<span class="params">self, arr: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">            <span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">            dic = Counter(arr)</span><br><span class="line">            </span><br><span class="line">            s = <span class="built_in">set</span>()</span><br><span class="line">            <span class="keyword">for</span> key,val <span class="keyword">in</span> dic.items():</span><br><span class="line">                <span class="keyword">if</span> val <span class="keyword">in</span> s:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                s.add(val)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1207-独一无二的出现次数&quot;&gt;&lt;a href=&quot;#1207-独一无二的出现次数&quot; class=&quot;headerlink&quot; title=&quot;1207 独一无二的出现次数&quot;&gt;&lt;/a&gt;1207 独一无二的出现次数&lt;/h2&gt;&lt;p&gt;给你一个整数数组 &lt;code&gt;arr&lt;/co</summary>
      
    
    
    
    <category term="leetcode" scheme="http://example.com/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/04/27/hello-world/"/>
    <id>http://example.com/2021/04/27/hello-world/</id>
    <published>2021-04-27T14:18:27.336Z</published>
    <updated>2021-04-27T14:18:27.336Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
